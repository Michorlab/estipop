// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// gmbp3
double gmbp3(int time, std::string file, Rcpp::NumericVector initial, Rcpp::List transitions, Rcpp::List stops, bool silence, SEXP seed);
RcppExport SEXP _gmbp_gmbp3(SEXP timeSEXP, SEXP fileSEXP, SEXP initialSEXP, SEXP transitionsSEXP, SEXP stopsSEXP, SEXP silenceSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type stops(stopsSEXP);
    Rcpp::traits::input_parameter< bool >::type silence(silenceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(gmbp3(time, file, initial, transitions, stops, silence, seed));
    return rcpp_result_gen;
END_RCPP
}
// test
double test(double a);
RcppExport SEXP _gmbp_test(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(test(a));
    return rcpp_result_gen;
END_RCPP
}
// t2
std::vector<double> t2(SEXP custom_distribution_file);
RcppExport SEXP _gmbp_t2(SEXP custom_distribution_fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type custom_distribution_file(custom_distribution_fileSEXP);
    rcpp_result_gen = Rcpp::wrap(t2(custom_distribution_file));
    return rcpp_result_gen;
END_RCPP
}
// timeDepBranch
double timeDepBranch(int time, std::string file, Rcpp::NumericVector initial, Rcpp::List transitions, Rcpp::List stops, bool silence);
RcppExport SEXP _gmbp_timeDepBranch(SEXP timeSEXP, SEXP fileSEXP, SEXP initialSEXP, SEXP transitionsSEXP, SEXP stopsSEXP, SEXP silenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type time(timeSEXP);
    Rcpp::traits::input_parameter< std::string >::type file(fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type initial(initialSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type transitions(transitionsSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type stops(stopsSEXP);
    Rcpp::traits::input_parameter< bool >::type silence(silenceSEXP);
    rcpp_result_gen = Rcpp::wrap(timeDepBranch(time, file, initial, transitions, stops, silence));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_gmbp_gmbp3", (DL_FUNC) &_gmbp_gmbp3, 7},
    {"_gmbp_test", (DL_FUNC) &_gmbp_test, 1},
    {"_gmbp_t2", (DL_FUNC) &_gmbp_t2, 1},
    {"_gmbp_timeDepBranch", (DL_FUNC) &_gmbp_timeDepBranch, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_gmbp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
